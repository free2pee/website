import Head from 'next/head';
import Image from 'next/image';
import { Inter } from 'next/font/google';
// import styles from '@/styles/Home.module.css'
import { useRouter } from 'next/router';;
import { useEffect, useState } from 'react';
import { NextPage } from 'next';
import { Grid, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';
import Link from 'next/link';
import LoginButton from '../components/LoginButton';
import LogoutButton from '../components/LogoutButton';

const Home: NextPage = () => {
  //  const inter = Inter({ subsets: ['latin'] });

  interface Geolocation {
    latitude: number;
    longitude: number;
  }

  interface Bathroom {
    id: number;
    lat: number;
    lon: number;
    tags: {
      name: string;
      [key: string]: string;
    };
  }

  const getUserLocation = (): Promise<Geolocation> => {
    return new Promise((resolve, reject) => {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            const { latitude, longitude } = position.coords;
            resolve({ latitude, longitude });
          },
          (error) => {
            reject(error);
          }
        );
      } else {
        reject(new Error('Geolocation is not supported by this browser.'));
      }
    });
  };

  const fetchNearestBathrooms = async (
    latitude: number,
    longitude: number
  ): Promise<Bathroom[]> => {
    // todo @alex 

    const overpassApiUrl = `https://overpass.kumi.systems/api/interpreter?data=[out:json];node[amenity=toilets](around:1000,${latitude},${longitude});out;`;

    const response = await fetch(overpassApiUrl);
    const data = await response.json();
    return data.elements;
  };

  const [bathrooms, setBathrooms] = useState<Bathroom[]>([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const { latitude, longitude } = await getUserLocation();
        const nearestBathrooms = await fetchNearestBathrooms(latitude, longitude);
        setBathrooms(nearestBathrooms);
      } catch (error) {
        console.error(error);
      }
    };

    fetchData();
  }, []);
  const router = useRouter();

  const goToTable = () => {
    const redirectToTable = async () => {
      try {
        const { latitude, longitude } = await getUserLocation();
        router.push(`/table?latitude=${latitude}&longitude=${longitude}`);
      } catch (error) {
        console.error(error);
      }
    };

    redirectToTable();
  };

  return (
    <>
      {/* ... */}
      {
        <div>
          <h1>Hello World</h1>
          <LoginButton />
          <LogoutButton />
        </div>
      }

      <button onClick={goToTable}>View Nearest Bathrooms in Table</button>
    </>
  );
};
// return (
//   <>
//     <Head>
//       <title>Create Next App</title>
//       <meta name="description" content="Generated by create next app" />
//       <meta name="viewport" content="width=device-width, initial-scale=1" />
//       <link rel="icon" href="/favicon.ico" />
//     </Head>
//     <div>
//     <BasicTable />
//     </div>
//   </>
// );
// };



// function createData(
//   name: string,
//   calories: number,
//   fat: number,
//   carbs: number,
//   protein: number,
// ) {
//   return { name, calories, fat, carbs, protein };
// }

// const rows = [
//   createData('Frozen yoghurt', 159, 6.0, 24, 4.0),
//   createData('Ice cream sandwich', 237, 9.0, 37, 4.3),
//   createData('Eclair', 262, 16.0, 24, 6.0),
//   createData('Cupcake', 305, 3.7, 67, 4.3),
//   createData('Gingerbread', 356, 16.0, 49, 3.9),
// ];

// function BasicTable() {
//   return (
//     <TableContainer component={Paper}>
//       <Table sx={{ minWidth: 650 }} aria-label="simple table">
//         <TableHead>
//           <TableRow>
//             <TableCell>Dessert (100g serving)</TableCell>
//             <TableCell align="right">Calories</TableCell>
//             <TableCell align="right">Fat&nbsp;(g)</TableCell>
//             <TableCell align="right">Carbs&nbsp;(g)</TableCell>
//             <TableCell align="right">Protein&nbsp;(g)</TableCell>
//           </TableRow>
//         </TableHead>
//         <TableBody>
//           {rows.map((row) => (
//             <TableRow
//               key={row.name}
//               sx={{ '&:last-child td, &:last-child th': { border: 0 } }}
//             >
//               <TableCell component="th" scope="row">
//                 {row.name}
//               </TableCell>
//               <TableCell align="right">{row.calories}</TableCell>
//               <TableCell align="right">{row.fat}</TableCell>
//               <TableCell align="right">{row.carbs}</TableCell>
//               <TableCell align="right">{row.protein}</TableCell>
//             </TableRow>
//           ))}
//         </TableBody>
//       </Table>
//     </TableContainer>
//   );
// }

export default Home;
